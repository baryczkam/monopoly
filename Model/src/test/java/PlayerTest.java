import Monopoly.Board.*;
import Monopoly.GameManager.GameManager;
import Monopoly.Player.*;
import Monopoly.SpecialCard.MoveFieldCard;
import Monopoly.SpecialCard.SpecialCard;
import org.junit.Test;
import org.junit.jupiter.api.Assertions;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class PlayerTest {


    @Test
    public void throwDiceTest(){
        Field field = new Field(0);
        List<PropertyField> propertyFields = new ArrayList<>();
        Pawn pawn = new Pawn(field,"0");
        Player player = new Player(0,propertyFields,pawn,"0");
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
        System.out.println(player.throwDice());
    }

    @Test
    public void movePawn() {
        Field field1 = new Field(0);
        Field field2 = new Field(1);
        Field field3 = new Field(2);
        Field field4 = new Field(3);
        Field field5 = new Field(4);
        Field field6 = new Field(5);
        Field field7 = new Field(6);
        Field field8 = new Field(7);
        Field field9 = new Field(8);
        Field field10 = new Field(9);
        Field field11 = new Field(10);
        Field field12 = new Field(11);
        Field field13 = new Field(12);
        Field field14 = new Field(13);
        Field field15 = new Field(14);
        Field field16 = new Field(15);
        Field field17 = new Field(16);
        Field field18 = new Field(17);
        Field field19 = new Field(18);
        Field field20 = new Field(19);
        Field field21 = new Field(20);
        Field field22 = new Field(21);
        Field field23 = new Field(22);
        Field field24 = new Field(23);
        Field field25 = new Field(24);
        Field field26 = new Field(25);
        Field field27 = new Field(26);
        Field field28 = new Field(27);
        Field field29 = new Field(28);
        Field field30 = new Field(29);
        Field field31 = new Field(30);
        Field field32 = new Field(31);
        Field field33 = new Field(32);
        Field field34 = new Field(33);
        Field field35 = new Field(34);
        Field field36 = new Field(35);
        Field field37 = new Field(36);
        Field field38 = new Field(37);
        Field field39 = new Field(38);
        Field field40 = new Field(39);
        List<Field> fields = new ArrayList<>();
        fields.add(field1);
        fields.add(field2);
        fields.add(field3);
        fields.add(field4);
        fields.add(field5);
        fields.add(field6);
        fields.add(field7);
        fields.add(field8);
        fields.add(field9);
        fields.add(field10);
        fields.add(field11);
        fields.add(field12);
        fields.add(field13);
        fields.add(field14);
        fields.add(field15);
        fields.add(field16);
        fields.add(field17);
        fields.add(field18);
        fields.add(field19);
        fields.add(field20);
        fields.add(field21);
        fields.add(field22);
        fields.add(field23);
        fields.add(field24);
        fields.add(field25);
        fields.add(field26);
        fields.add(field27);
        fields.add(field28);
        fields.add(field29);
        fields.add(field30);
        fields.add(field31);
        fields.add(field32);
        fields.add(field33);
        fields.add(field34);
        fields.add(field35);
        fields.add(field36);
        fields.add(field37);
        fields.add(field38);
        fields.add(field39);
        fields.add(field40);
        List<PropertyField> propertyFields = new ArrayList<>();
        Pawn pawn = new Pawn(field40, "0");
        Player player = new Player(0, propertyFields, pawn,"0");
        List<SpecialCard> specialCards = new ArrayList<>();
        Board.getInstance(null,null).setFieldList(fields);
        Board.getInstance(null,null).setSpecialCardList(specialCards);
        player.move(10);
        Assertions.assertNotEquals(player.getPawn().getCurrentLocation(), field40);
        System.out.println("aktualna lokalizacja: " + player.getPawn().getCurrentLocation().getFieldIndex());
        Assertions.assertEquals(player.getPawn().getCurrentLocation(), field10);
        player.move(31);
        System.out.println("aktualna lokalizacja: " + player.getPawn().getCurrentLocation().getFieldIndex());
        System.out.println(player.getPawn().toString());
        player.move();
        System.out.println("aktualna lokalizacja: " + player.getPawn().getCurrentLocation().getFieldIndex());
        System.out.println(player.getPawn().toString());
        player.move(30);

    }

    @Test
    public void moveToJailTest(){
        Field field1 = new Field(0);
        Field field2 = new Field(1);
        Field field3 = new Field(2);
        Field field4 = new Field(3);
        Field field5 = new Field(4);
        Field field6 = new Field(5);
        Field field7 = new JailField(6);
        Field field8 = new Field(7);
        Field field9 = new Field(8);
        Field field10 = new Field(9);
        Field field11 = new Field(10);
        Field field12 = new Field(11);
        Field field13 = new Field(12);
        Field field14 = new Field(13);
        Field field15 = new Field(14);
        Field field16 = new Field(15);
        Field field17 = new Field(16);
        Field field18 = new Field(17);
        Field field19 = new Field(18);
        Field field20 = new Field(19);
        Field field21 = new Field(20);
        Field field22 = new Field(21);
        Field field23 = new Field(22);
        Field field24 = new Field(23);
        Field field25 = new Field(24);
        Field field26 = new Field(25);
        Field field27 = new Field(26);
        Field field28 = new Field(27);
        Field field29 = new Field(28);
        Field field30 = new Field(29);
        Field field31 = new Field(30);
        Field field32 = new Field(31);
        Field field33 = new Field(32);
        Field field34 = new Field(33);
        Field field35 = new Field(34);
        Field field36 = new Field(35);
        Field field37 = new Field(36);
        Field field38 = new Field(37);
        Field field39 = new Field(38);
        Field field40 = new Field(39);
        List<Field> fields = new ArrayList<>();
        fields.add(field1);
        fields.add(field2);
        fields.add(field3);
        fields.add(field4);
        fields.add(field5);
        fields.add(field6);
        fields.add(field7);
        fields.add(field8);
        fields.add(field9);
        fields.add(field10);
        fields.add(field11);
        fields.add(field12);
        fields.add(field13);
        fields.add(field14);
        fields.add(field15);
        fields.add(field16);
        fields.add(field17);
        fields.add(field18);
        fields.add(field19);
        fields.add(field20);
        fields.add(field21);
        fields.add(field22);
        fields.add(field23);
        fields.add(field24);
        fields.add(field25);
        fields.add(field26);
        fields.add(field27);
        fields.add(field28);
        fields.add(field29);
        fields.add(field30);
        fields.add(field31);
        fields.add(field32);
        fields.add(field33);
        fields.add(field34);
        fields.add(field35);
        fields.add(field36);
        fields.add(field37);
        fields.add(field38);
        fields.add(field39);
        fields.add(field40);
        List<PropertyField> propertyFields = new ArrayList<>();
        Pawn pawn = new Pawn(field40, "0");
        Player player = new Player(0, propertyFields, pawn,"0");
        List<SpecialCard> specialCards = new ArrayList<>();
        Board.getInstance(null,null).setFieldList(fields);
        Board.getInstance(null,null).setSpecialCardList(specialCards);
        Assertions.assertEquals(player.getPawn().getCurrentLocation(), field40);
        player.move(-1);
        Assertions.assertEquals(player.getInJailTurn(), 0);
        Assertions.assertEquals(player.getPawn().getCurrentLocation(), field7);
        player.move(10);
        Assertions.assertEquals(player.getInJailTurn(), 1);
        Assertions.assertEquals(player.getPawn().getCurrentLocation(), field7);
        player.move(10);
        Assertions.assertEquals(player.getInJailTurn(), 2);
        Assertions.assertEquals(player.getPawn().getCurrentLocation(), field7);
        player.move(10);
        Assertions.assertEquals(player.getInJailTurn(), 0);
        Assertions.assertEquals(player.getPawn().getCurrentLocation(), field17);

//        player.move(board, -1);
//        Assertions.assertEquals(player.getPawn().getCurrentLocation(), field7);
//        player.move(board);
//        System.out.println(player.getPawn().getCurrentLocation().getFieldIndex());

    }

    @Test
    public void exitJail(){
        Field field1 = new Field(0);
        Field field2 = new Field(1);
        Field field3 = new Field(2);
        Field field4 = new Field(3);
        Field field5 = new Field(4);
        Field field6 = new Field(5);
        Field field7 = new JailField(6);
        Field field8 = new Field(7);
        Field field9 = new Field(8);
        Field field10 = new Field(9);
        Field field11 = new Field(10);
        Field field12 = new Field(11);
        Field field13 = new Field(12);
        Field field14 = new Field(13);
        Field field15 = new Field(14);
        Field field16 = new Field(15);
        Field field17 = new Field(16);
        Field field18 = new Field(17);
        Field field19 = new Field(18);
        Field field20 = new Field(19);
        Field field21 = new Field(20);
        Field field22 = new Field(21);
        Field field23 = new Field(22);
        Field field24 = new Field(23);
        Field field25 = new Field(24);
        Field field26 = new Field(25);
        Field field27 = new Field(26);
        Field field28 = new Field(27);
        Field field29 = new Field(28);
        Field field30 = new Field(29);
        Field field31 = new Field(30);
        Field field32 = new Field(31);
        Field field33 = new Field(32);
        Field field34 = new Field(33);
        Field field35 = new Field(34);
        Field field36 = new Field(35);
        Field field37 = new Field(36);
        Field field38 = new Field(37);
        Field field39 = new Field(38);
        Field field40 = new Field(39);
        List<Field> fields = new ArrayList<>();
        fields.add(field1);
        fields.add(field2);
        fields.add(field3);
        fields.add(field4);
        fields.add(field5);
        fields.add(field6);
        fields.add(field7);
        fields.add(field8);
        fields.add(field9);
        fields.add(field10);
        fields.add(field11);
        fields.add(field12);
        fields.add(field13);
        fields.add(field14);
        fields.add(field15);
        fields.add(field16);
        fields.add(field17);
        fields.add(field18);
        fields.add(field19);
        fields.add(field20);
        fields.add(field21);
        fields.add(field22);
        fields.add(field23);
        fields.add(field24);
        fields.add(field25);
        fields.add(field26);
        fields.add(field27);
        fields.add(field28);
        fields.add(field29);
        fields.add(field30);
        fields.add(field31);
        fields.add(field32);
        fields.add(field33);
        fields.add(field34);
        fields.add(field35);
        fields.add(field36);
        fields.add(field37);
        fields.add(field38);
        fields.add(field39);
        fields.add(field40);
        List<PropertyField> propertyFields = new ArrayList<>();
        Pawn pawn = new Pawn(field40, "0");
        Player player = new Player(0, propertyFields, pawn,"0");
        List<SpecialCard> specialCards = new ArrayList<>();
        Board.getInstance(null,null).setFieldList(fields);
        Board.getInstance(null,null).setSpecialCardList(specialCards);
        Assertions.assertEquals(player.getPawn().getCurrentLocation(), field40);
        player.move(-1);
        Assertions.assertEquals(player.getInJailTurn(), 0);
        Assertions.assertEquals(player.getPawn().getCurrentLocation(), field7);
        player.setCanExitJail(true);
        player.move(5);
        Assertions.assertEquals(player.getPawn().getCurrentLocation(), field12);
        Assertions.assertEquals(player.getInJailTurn(), 0);
    }

    @Test
    public void buyPropertyFieldTest(){
        List<PropertyField> propertyFields1 = new ArrayList<>();
        List<PropertyField> propertyFields2 = new ArrayList<>();
        Participant bank = new Bank(propertyFields1);

        Field field1 = new Field(0);
        PropertyField field2 = new DistrictField(1,50,bank,10,ColorDistrictField.GREEN);
        Field field3 = new Field(2);
        Field field4 = new Field(3);
        Field field5 = new Field(4);
        Field field6 = new Field(5);
        Field field7 = new JailField(6);
        Field field8 = new Field(7);
        Field field9 = new Field(8);
        Field field10 = new Field(9);
        Field field11 = new Field(10);
        Field field12 = new Field(11);
        Field field13 = new Field(12);
        Field field14 = new Field(13);
        Field field15 = new Field(14);
        Field field16 = new Field(15);
        Field field17 = new Field(16);
        Field field18 = new Field(17);
        Field field19 = new Field(18);
        Field field20 = new Field(19);
        Field field21 = new Field(20);
        Field field22 = new Field(21);
        Field field23 = new Field(22);
        Field field24 = new Field(23);
        Field field25 = new Field(24);
        Field field26 = new Field(25);
        Field field27 = new Field(26);
        Field field28 = new Field(27);
        Field field29 = new Field(28);
        Field field30 = new Field(29);
        Field field31 = new Field(30);
        Field field32 = new Field(31);
        Field field33 = new Field(32);
        Field field34 = new Field(33);
        Field field35 = new Field(34);
        Field field36 = new Field(35);
        Field field37 = new Field(36);
        Field field38 = new Field(37);
        Field field39 = new Field(38);
        Field field40 = new Field(39);
        List<Field> fields = new ArrayList<>();
        fields.add(field1);
        fields.add(field2);
        fields.add(field3);
        fields.add(field4);
        fields.add(field5);
        fields.add(field6);
        fields.add(field7);
        fields.add(field8);
        fields.add(field9);
        fields.add(field10);
        fields.add(field11);
        fields.add(field12);
        fields.add(field13);
        fields.add(field14);
        fields.add(field15);
        fields.add(field16);
        fields.add(field17);
        fields.add(field18);
        fields.add(field19);
        fields.add(field20);
        fields.add(field21);
        fields.add(field22);
        fields.add(field23);
        fields.add(field24);
        fields.add(field25);
        fields.add(field26);
        fields.add(field27);
        fields.add(field28);
        fields.add(field29);
        fields.add(field30);
        fields.add(field31);
        fields.add(field32);
        fields.add(field33);
        fields.add(field34);
        fields.add(field35);
        fields.add(field36);
        fields.add(field37);
        fields.add(field38);
        fields.add(field39);
        fields.add(field40);
        propertyFields1.add(field2);
        List<SpecialCard> specialCards = new ArrayList<>();
        Board.getInstance(null,null).setFieldList(fields);
        Board.getInstance(null,null).setSpecialCardList(specialCards);
        Pawn pawn = new Pawn(field1,"0");
        Player player = new Player(100,propertyFields2,pawn,"0");
        player.move(1);
        Assertions.assertEquals(player.getPawn().getCurrentLocation(),field2);
        Assertions.assertNotEquals(((DistrictField) player.getPawn().getCurrentLocation()).getOwner(),player);
        player.buyProperty();
        Assertions.assertEquals(player.getListOfProperties().get(0),field2);
        Assertions.assertEquals(((DistrictField) player.getPawn().getCurrentLocation()).getOwner(),player);
        Assertions.assertEquals(player.getListOfProperties().size(),1);
        Assertions.assertEquals(player.getMoney(),50);
        Assertions.assertEquals(bank.getListOfProperties().size(),0);

    }
    @Test
    public void payForStay(){
        List<PropertyField> propertyFields1 = new ArrayList<>();
        List<PropertyField> propertyFields2 = new ArrayList<>();
        List<PropertyField> propertyFields3 = new ArrayList<>();
        Participant bank = new Bank(propertyFields1);

        Field field1 = new Field(0);
        PropertyField field2 = new DistrictField(1,50,bank,10,ColorDistrictField.BLUE);
        PropertyField field3 = new DistrictField(2,70,bank,15,ColorDistrictField.BLUE);
        Field field4 = new Field(3);
        PropertyField field5 = new DistrictField(4,40,bank,100,ColorDistrictField.BLUE);
        Field field6 = new Field(5);
        Field field7 = new JailField(6);
        Field field8 = new Field(7);
        Field field9 = new Field(8);
        Field field10 = new Field(9);
        Field field11 = new Field(10);
        Field field12 = new Field(11);
        Field field13 = new Field(12);
        Field field14 = new Field(13);
        Field field15 = new Field(14);
        Field field16 = new Field(15);
        Field field17 = new Field(16);
        Field field18 = new Field(17);
        Field field19 = new Field(18);
        Field field20 = new Field(19);
        Field field21 = new Field(20);
        Field field22 = new Field(21);
        Field field23 = new Field(22);
        Field field24 = new Field(23);
        Field field25 = new Field(24);
        Field field26 = new Field(25);
        Field field27 = new Field(26);
        Field field28 = new Field(27);
        Field field29 = new Field(28);
        Field field30 = new Field(29);
        Field field31 = new Field(30);
        Field field32 = new Field(31);
        Field field33 = new Field(32);
        Field field34 = new Field(33);
        Field field35 = new Field(34);
        Field field36 = new Field(35);
        Field field37 = new Field(36);
        Field field38 = new Field(37);
        Field field39 = new Field(38);
        Field field40 = new Field(39);
        List<Field> fields = new ArrayList<>();
        fields.add(field1);
        fields.add(field2);
        fields.add(field3);
        fields.add(field4);
        fields.add(field5);
        fields.add(field6);
        fields.add(field7);
        fields.add(field8);
        fields.add(field9);
        fields.add(field10);
        fields.add(field11);
        fields.add(field12);
        fields.add(field13);
        fields.add(field14);
        fields.add(field15);
        fields.add(field16);
        fields.add(field17);
        fields.add(field18);
        fields.add(field19);
        fields.add(field20);
        fields.add(field21);
        fields.add(field22);
        fields.add(field23);
        fields.add(field24);
        fields.add(field25);
        fields.add(field26);
        fields.add(field27);
        fields.add(field28);
        fields.add(field29);
        fields.add(field30);
        fields.add(field31);
        fields.add(field32);
        fields.add(field33);
        fields.add(field34);
        fields.add(field35);
        fields.add(field36);
        fields.add(field37);
        fields.add(field38);
        fields.add(field39);
        fields.add(field40);
        propertyFields1.add(field2);
        propertyFields1.add(field5);
        List<SpecialCard> specialCards = new ArrayList<>();
        Board.getInstance(null,null).setFieldList(fields);
        Board.getInstance(null,null).setSpecialCardList(specialCards);
        Pawn pawn = new Pawn(field1,"0");
        Pawn pawn2 = new Pawn(field1,"1");
        Player player1 = new Player(100,propertyFields2,pawn,"0");
        Player player2 = new Player(100,propertyFields3,pawn2,"1");
        player1.move(1);
        Assertions.assertEquals(player1.getPawn().getCurrentLocation(),field2);
        player1.buyProperty();

        player2.move(1);
        Assertions.assertEquals(player2.getPawn().getCurrentLocation(),field2);
        Assertions.assertEquals(player1.getMoney(),60);
        Assertions.assertEquals(player2.getMoney(),90);
        player2.buyProperty();
        System.out.println(player2.getPawn().getCurrentLocation().getFieldIndex());
        Assertions.assertEquals(player2.getListOfProperties().size(),0);
        player1.move(1);
        player1.buyProperty();
        Assertions.assertEquals(player1.getListOfProperties().size(),1);
        player1.move(1);
        player1.buyProperty();
        Assertions.assertEquals(player1.getListOfProperties().size(),1);
        player1.move(1);
        player1.buyProperty();
        Assertions.assertEquals(player1.getListOfProperties().get(1),field5);
        Assertions.assertEquals(player1.getListOfProperties().size(),2);
        player2.move(3);
        Assertions.assertEquals(player2.getMoney(),-110);
        System.out.println(player1.toString());
        System.out.println(player2.toString());
        player1.move(-4);
        player1.move(1);
        Assertions.assertEquals(player1.getMoney(),220);
        System.out.println(player1.getPawn().getCurrentLocation().getFieldIndex());
        System.out.println(player1.toString());
        System.out.println(player2.toString());

    }
    @Test
    public void taxAndParkingFieldTest(){
        Field field1 = new Field(0);
        TaxField field2 = new TaxField(1,100);
        ParkingField field3 = new ParkingField(2,0);
        Field field4 = new Field(3);
        Field field5 = new Field(4);
        Field field6 = new Field(5);
        Field field7 = new JailField(6);
        Field field8 = new Field(7);
        Field field9 = new Field(8);
        Field field10 = new Field(9);
        Field field11 = new Field(10);
        Field field12 = new Field(11);
        Field field13 = new Field(12);
        Field field14 = new Field(13);
        Field field15 = new Field(14);
        Field field16 = new Field(15);
        Field field17 = new Field(16);
        Field field18 = new Field(17);
        Field field19 = new Field(18);
        Field field20 = new Field(19);
        Field field21 = new Field(20);
        Field field22 = new Field(21);
        Field field23 = new Field(22);
        Field field24 = new Field(23);
        Field field25 = new Field(24);
        Field field26 = new Field(25);
        Field field27 = new Field(26);
        Field field28 = new Field(27);
        Field field29 = new Field(28);
        Field field30 = new Field(29);
        Field field31 = new Field(30);
        Field field32 = new Field(31);
        Field field33 = new Field(32);
        Field field34 = new Field(33);
        Field field35 = new Field(34);
        Field field36 = new Field(35);
        Field field37 = new Field(36);
        Field field38 = new Field(37);
        Field field39 = new Field(38);
        Field field40 = new Field(39);
        List<Field> fields = new ArrayList<>();
        fields.add(field1);
        fields.add(field2);
        fields.add(field3);
        fields.add(field4);
        fields.add(field5);
        fields.add(field6);
        fields.add(field7);
        fields.add(field8);
        fields.add(field9);
        fields.add(field10);
        fields.add(field11);
        fields.add(field12);
        fields.add(field13);
        fields.add(field14);
        fields.add(field15);
        fields.add(field16);
        fields.add(field17);
        fields.add(field18);
        fields.add(field19);
        fields.add(field20);
        fields.add(field21);
        fields.add(field22);
        fields.add(field23);
        fields.add(field24);
        fields.add(field25);
        fields.add(field26);
        fields.add(field27);
        fields.add(field28);
        fields.add(field29);
        fields.add(field30);
        fields.add(field31);
        fields.add(field32);
        fields.add(field33);
        fields.add(field34);
        fields.add(field35);
        fields.add(field36);
        fields.add(field37);
        fields.add(field38);
        fields.add(field39);
        fields.add(field40);
        List<SpecialCard> specialCards = new ArrayList<>();
        Board.getInstance(null,null).setFieldList(fields);
        Board.getInstance(null,null).setSpecialCardList(specialCards);
        Pawn pawn = new Pawn(field1,"0");
        List<PropertyField> propertyFields = new ArrayList<>();
        Player player = new Player(110,propertyFields,pawn,"0");
        player.move(1);
        Assertions.assertEquals(player.getMoney(),10);
        Assertions.assertEquals(field3.getMoneyPayment(),100);

        player.move(1);
        Assertions.assertEquals(player.getMoney(),110);
        Assertions.assertEquals(field3.getMoneyPayment(),0);
    }

    @Test
    public void goToJailTest(){
        Field field1 = new Field(0);
        GoToJailField field2 = new GoToJailField(1);
        Field field3 = new Field(2);
        Field field4 = new Field(3);
        Field field5 = new Field(4);
        Field field6 = new Field(5);
        Field field7 = new JailField(6);
        Field field8 = new Field(7);
        Field field9 = new Field(8);
        Field field10 = new Field(9);
        Field field11 = new Field(10);
        Field field12 = new Field(11);
        Field field13 = new Field(12);
        Field field14 = new Field(13);
        Field field15 = new Field(14);
        Field field16 = new Field(15);
        Field field17 = new Field(16);
        Field field18 = new Field(17);
        Field field19 = new Field(18);
        Field field20 = new Field(19);
        Field field21 = new Field(20);
        Field field22 = new Field(21);
        Field field23 = new Field(22);
        Field field24 = new Field(23);
        Field field25 = new Field(24);
        Field field26 = new Field(25);
        Field field27 = new Field(26);
        Field field28 = new Field(27);
        Field field29 = new Field(28);
        Field field30 = new Field(29);
        Field field31 = new Field(30);
        Field field32 = new Field(31);
        Field field33 = new Field(32);
        Field field34 = new Field(33);
        Field field35 = new Field(34);
        Field field36 = new Field(35);
        Field field37 = new Field(36);
        Field field38 = new Field(37);
        Field field39 = new Field(38);
        Field field40 = new Field(39);
        List<Field> fields = new ArrayList<>();
        fields.add(field1);
        fields.add(field2);
        fields.add(field3);
        fields.add(field4);
        fields.add(field5);
        fields.add(field6);
        fields.add(field7);
        fields.add(field8);
        fields.add(field9);
        fields.add(field10);
        fields.add(field11);
        fields.add(field12);
        fields.add(field13);
        fields.add(field14);
        fields.add(field15);
        fields.add(field16);
        fields.add(field17);
        fields.add(field18);
        fields.add(field19);
        fields.add(field20);
        fields.add(field21);
        fields.add(field22);
        fields.add(field23);
        fields.add(field24);
        fields.add(field25);
        fields.add(field26);
        fields.add(field27);
        fields.add(field28);
        fields.add(field29);
        fields.add(field30);
        fields.add(field31);
        fields.add(field32);
        fields.add(field33);
        fields.add(field34);
        fields.add(field35);
        fields.add(field36);
        fields.add(field37);
        fields.add(field38);
        fields.add(field39);
        fields.add(field40);
        List<SpecialCard> specialCards = new ArrayList<>();
        Board.getInstance(null,null).setFieldList(fields);
        Board.getInstance(null,null).setSpecialCardList(specialCards);
        Pawn pawn = new Pawn(field1,"0");
        List<PropertyField> propertyFields = new ArrayList<>();
        Player player = new Player(110,propertyFields,pawn,"0");
        player.move(1);
        Assertions.assertEquals(player.getPawn().getCurrentLocation(),field7);
    }

//    @Test
//    public void takeCardTest(){
//        GameManager game = new GameManager();
//        game.initializeBoard();
//        List<PropertyField> propertyFields = new ArrayList<>();
//        Pawn pawn = new Pawn(Board.getInstance(null,null).getField(0),"0");
//        Player player = new Player(110,propertyFields,pawn,"0");
//        player.move(1);
//        Assertions.assertEquals(player.getPawn().getCurrentLocation(),Board.getInstance(null,null).getField(1));
//        player.move(1);
//        Assertions.assertEquals(player.getMoney(),110);
//        // 1 karta
//        player.takeCard(0);
//        Assertions.assertEquals(player.getMoney(),310);
//        Assertions.assertEquals(player.getPawn().getCurrentLocation(),Board.getInstance(null,null).getField(0));
//        player.move(7);
//        Assertions.assertEquals(player.getMoney(),310);
//        // 2 karta
//        player.takeCard(1);
//        Assertions.assertEquals(player.getMoney(),510);
//        Assertions.assertEquals(player.getPawn().getCurrentLocation(),Board.getInstance(null,null).getField(5));
//        // 3 karta
//        player.move(2);
//        Assertions.assertEquals(player.getMoney(),510);
//
//        player.takeCard(2);
//        Assertions.assertEquals(player.getMoney(),510);
//        Assertions.assertEquals(player.getPawn().getCurrentLocation(),Board.getInstance(null,null).getField(24));
//
//        // 4 karta
//        player.move(9);
//        Assertions.assertEquals(player.getMoney(),510);
//        player.takeCard(3);
//        Assertions.assertEquals(player.getMoney(),710);
//        Assertions.assertEquals(player.getPawn().getCurrentLocation(),Board.getInstance(null,null).getField(11));
//
//        // 5 karta
//        player.move(6);
//        player.takeCard(4);
//        Assertions.assertEquals(player.getMoney(),710);
//        // 6 karta chyba ok
//        player.move(3);
//        Assertions.assertEquals(player.getMoney(),910);
//        player.takeCard(5);
//        Assertions.assertEquals(player.getPawn().getCurrentLocation().getFieldIndex(),5);
//        // 7 karta
//        player.move(2);
//        Assertions.assertEquals(player.getMoney(),910);
//        player.takeCard(6);
//        Assertions.assertEquals(player.getPawn().getCurrentLocation().getFieldIndex(),5);
//        // 8 karta
//        player.move(2);
//        Assertions.assertEquals(player.getMoney(),1110);
//        player.takeCard(7);
//        Assertions.assertEquals(player.getMoney(),1110);
//        Assertions.assertEquals(player.getPawn().getCurrentLocation(),Board.getInstance(null,null).getField(12));
//        // 9 karta
//        player.move(5);
//        Assertions.assertEquals(player.getMoney(),1110);
//        player.takeCard(8);
//        Assertions.assertEquals(player.getMoney(),1110);
//        Assertions.assertEquals(player.getPawn().getCurrentLocation(),Board.getInstance(null,null).getField(14));
//        // 10 karta
//        player.move(3);
//        player.takeCard(9);
//        Assertions.assertEquals(player.getMoney(),1060);
//        // 11 karta
//        player.takeCard(10);
//        Assertions.assertEquals(player.getMoney(),1045);
//        // 12 karta
//        player.takeCard(11);
//        Assertions.assertEquals(player.getMoney(),1195);
//        // 13 karta
//        player.takeCard(12);
//        Assertions.assertEquals(player.getMoney(),1245);
//        // 14 karta
//        player.takeCard(13);
//        Assertions.assertEquals(player.getMoney(),1245);
//        // 16 karta
//        player.takeCard(15);
//        Assertions.assertEquals(player.getMoney(),1245);
//        // 15 karta
//        player.takeCard(14);
//        Assertions.assertEquals(player.getPawn().getCurrentLocation(),Board.getInstance(null,null).getJailField());
//        player.move(2);
//        Assertions.assertEquals(player.getPawn().getCurrentLocation().getFieldIndex(),12);
//    }

//    @Test
//    public void buyAndPayForStationsAndFactiories(){
//        GameManager game = new GameManager();
//        game.initializeBoard();
//        List<PropertyField> propertyFields1 = new ArrayList<>();
//        List<PropertyField> propertyFields2 = new ArrayList<>();
//        Pawn pawn1 = new Pawn(Board.getInstance(null,null).getField(0),"0");
//        Pawn pawn2 = new Pawn(Board.getInstance(null,null).getField(0),"1");
//        Player player1 = new Player(1000,propertyFields1,pawn1,"0");
//        Player player2 = new Player(1040,propertyFields2,pawn2,"1");
//        player1.move(5);
//        player1.buyProperty();
//        player2.move(5);
//        Assertions.assertEquals(player1.getMoney(),850);
//        Assertions.assertEquals(player2.getMoney(),990);
//        player1.move(10);
//        player1.buyProperty();
//        player2.move(10);
//        Assertions.assertEquals(player1.getMoney(),750);
//        Assertions.assertEquals(player2.getMoney(),890);
//        player1.move(10);
//        player1.buyProperty();
//        player2.move(10);
//        Assertions.assertEquals(player1.getMoney(),750);
//        Assertions.assertEquals(player2.getMoney(),690);
//        player1.move(10);
//        player1.buyProperty();
//        player2.move(10);
//        Assertions.assertEquals(player1.getMoney(),950);
//        Assertions.assertEquals(player2.getMoney(),290);
//        System.out.println(player1.toString());
//        player1.move(17);
//        System.out.println(player1.toString());
//        player1.buyProperty();
//        System.out.println(player1.toString());
//        player2.move(17);
//        System.out.println(player1.toString());
//        Assertions.assertEquals(player1.getMoney(),1170);
//        Assertions.assertEquals(player2.getMoney(),320);
//        player1.move(16);
//        player1.buyProperty();
//        player2.move(16);
//        Assertions.assertEquals(player1.getMoney(),1340);
//        Assertions.assertEquals(player2.getMoney(),0);
//    }

    @Test
    public void buyDistricstsTest(){
        List<PropertyField> propertyFields1 = new ArrayList<>();
        List<PropertyField> propertyFields2 = new ArrayList<>();
        List<PropertyField> propertyFields3 = new ArrayList<>();
        Participant bank = new Bank(propertyFields1);

        Field field1 = new Field(0);
        PropertyField field2 = new DistrictField(1,50,bank,10,ColorDistrictField.BLUE);
        PropertyField field3 = new DistrictField(2,70,bank,15,ColorDistrictField.BLUE);
        Field field4 = new Field(3);
        PropertyField field5 = new DistrictField(4,40,bank,100,ColorDistrictField.GREEN);
        Field field6 = new Field(5);
        Field field7 = new JailField(6);
        Field field8 = new Field(7);
        PropertyField field9 = new DistrictField(8, 50,bank,150,ColorDistrictField.GREEN);
        PropertyField field10 = new DistrictField(9,50,bank,200,ColorDistrictField.GREEN);
        Field field11 = new Field(10);
        Field field12 = new Field(11);
        Field field13 = new Field(12);
        Field field14 = new Field(13);
        Field field15 = new Field(14);
        Field field16 = new Field(15);
        Field field17 = new Field(16);
        Field field18 = new Field(17);
        Field field19 = new Field(18);
        Field field20 = new Field(19);
        Field field21 = new Field(20);
        Field field22 = new Field(21);
        Field field23 = new Field(22);
        Field field24 = new Field(23);
        Field field25 = new Field(24);
        Field field26 = new Field(25);
        Field field27 = new Field(26);
        Field field28 = new Field(27);
        Field field29 = new Field(28);
        Field field30 = new Field(29);
        Field field31 = new Field(30);
        Field field32 = new Field(31);
        Field field33 = new Field(32);
        Field field34 = new Field(33);
        Field field35 = new Field(34);
        Field field36 = new Field(35);
        Field field37 = new Field(36);
        Field field38 = new Field(37);
        Field field39 = new Field(38);
        Field field40 = new Field(39);
        List<Field> fields = new ArrayList<>();
        fields.add(field1);
        fields.add(field2);
        fields.add(field3);
        fields.add(field4);
        fields.add(field5);
        fields.add(field6);
        fields.add(field7);
        fields.add(field8);
        fields.add(field9);
        fields.add(field10);
        fields.add(field11);
        fields.add(field12);
        fields.add(field13);
        fields.add(field14);
        fields.add(field15);
        fields.add(field16);
        fields.add(field17);
        fields.add(field18);
        fields.add(field19);
        fields.add(field20);
        fields.add(field21);
        fields.add(field22);
        fields.add(field23);
        fields.add(field24);
        fields.add(field25);
        fields.add(field26);
        fields.add(field27);
        fields.add(field28);
        fields.add(field29);
        fields.add(field30);
        fields.add(field31);
        fields.add(field32);
        fields.add(field33);
        fields.add(field34);
        fields.add(field35);
        fields.add(field36);
        fields.add(field37);
        fields.add(field38);
        fields.add(field39);
        fields.add(field40);
        propertyFields1.add(field2);
        propertyFields1.add(field5);
        List<SpecialCard> specialCards = new ArrayList<>();
        MoveFieldCard card1 = new MoveFieldCard(field1);
        MoveFieldCard card2 = new MoveFieldCard(field6);
        specialCards.add(card1);
        specialCards.add(card2);
        Board.getInstance(null,null).setSpecialCardList(specialCards);
        Board.getInstance(null,null).setFieldList(fields);
        Pawn pawn = new Pawn(field1,"0");
        Pawn pawn2 = new Pawn(field1,"1");
        Player player1 = new Player(1000,propertyFields2,pawn,"0");
        Player player2 = new Player(1000,propertyFields3,pawn2,"1");

        player1.move(1);
        player1.buyProperty();
        player2.move(1);
        Assertions.assertEquals(player1.getMoney(),960);
        Assertions.assertEquals(player2.getMoney(),990);
        player1.move(1);
        player1.buyProperty();
        player2.move(1);
        Assertions.assertEquals(player1.getMoney(),920);
        Assertions.assertEquals(player2.getMoney(),960);
        player1.move(2);
        player1.buyProperty();
        Assertions.assertEquals(player1.getMoney(),880);
        player2.move(2);
        Assertions.assertEquals(player1.getMoney(),980);
        Assertions.assertEquals(player2.getMoney(),860);
        player1.move(4);
        player1.buyProperty();
        Assertions.assertEquals(player1.getMoney(),930);
        player2.move(4);
        Assertions.assertEquals(player1.getMoney(),1080);
        Assertions.assertEquals(player2.getMoney(),710);
        player1.move(1);
        player1.buyProperty();
        Assertions.assertEquals(player1.getMoney(),1030);
        player2.move(1);
        Assertions.assertEquals(player1.getMoney(),1430);
        Assertions.assertEquals(player2.getMoney(),310);
    }

    @Test
    public void takeRandomCardTest(){
        GameManager game = new GameManager();
        game.initializeBoard();
        System.out.println(Board.getInstance(null,null).getSpecialCardList().size());
        Random r = new Random();
        int cos1 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2);
        int cos2 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2);
        int cos3 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2);
        int cos4 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2);
        int cos5 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2);
        int cos6 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2);
        int cos7 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2);
        int cos8 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2);
        int cos9 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2);
        int cos10 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2);
        int cos11 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2);
        int cos12 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2);
        int cos13 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2);
        int cos14 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2);
        int cos15 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2);
        System.out.println(cos1);
        System.out.println(cos2);
        System.out.println(cos3);
        System.out.println(cos4);
        System.out.println(cos5);
        System.out.println(cos6);
        System.out.println(cos7);
        System.out.println(cos8);
        System.out.println(cos9);
        System.out.println(cos10);
        System.out.println(cos11);
        System.out.println(cos12);
        System.out.println(cos13);
        System.out.println(cos14);
        System.out.println(cos15);
        System.out.println("---------------------------------");
        int cos16 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2) + 16;
        int cos17 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2) + 16;
        int cos18 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2) + 16;
        int cos19 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2) + 16;
        int cos20 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2) + 16;
        int cos21 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2) + 16;
        int cos22 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2) + 16;
        int cos23 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2) + 16;
        int cos24 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2) + 16;
        int cos25 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2) + 16;
        int cos26 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2) + 16;
        int cos27 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2) + 16;
        int cos28 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2) + 16;
        int cos29 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2) + 16;
        int cos30 = r.nextInt(Board.getInstance(null,null).getSpecialCardList().size()/2) + 16;
        System.out.println(cos16);
        System.out.println(cos17);
        System.out.println(cos18);
        System.out.println(cos19);
        System.out.println(cos20);
        System.out.println(cos21);
        System.out.println(cos22);
        System.out.println(cos23);
        System.out.println(cos24);
        System.out.println(cos25);
        System.out.println(cos26);
        System.out.println(cos27);
        System.out.println(cos28);
        System.out.println(cos29);
        System.out.println(cos30);
    }

//    @Test
//    public void saveTest() throws IOException {
////        PrintWriter zapis = new PrintWriter("nazwa_pliku.txt");
//        GameManager game = new GameManager();
//        game.initializeBoard();
//        FileOutputStream fileOut = new FileOutputStream("nazwa_pliku.txt");
//        ObjectOutputStream objectOut = new ObjectOutputStream(fileOut);
////        objectOut.writeObject(Board.getInstance(null,null).getSpecialCardList());
////        objectOut.writeObject(Board.getInstance(null,null).getFieldList());
//        objectOut.writeObject(Board.getInstance(null,null));
//        objectOut.close();
//
//    }
}

